@page "/"
@inject IJSRuntime JsRuntime

<div class="sw3do-browser">
    <div class="browser-header">
        <div class="nav-controls">
            <button class="nav-btn back" @onclick="GoBack" disabled="@(!CanGoBack)" title="Back">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M19 12H5M12 19l-7-7 7-7"/>
                </svg>
            </button>
            <button class="nav-btn forward" @onclick="GoForward" disabled="@(!CanGoForward)" title="Forward">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M5 12h14M12 5l7 7-7 7"/>
                </svg>
            </button>
            <button class="nav-btn refresh" @onclick="Refresh" title="Refresh">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M1 4v6h6M23 20v-6h-6"/>
                    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
                </svg>
            </button>
        </div>
        
        <div class="address-container">
            <div class="privacy-indicator" title="Private browsing - No data stored">
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 1a3 3 0 0 0-3 3v1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1V4a3 3 0 0 0-3-3z"/>
                    <path d="M12 8v4"/>
                </svg>
            </div>
            <input type="text" @bind="CurrentUrl" @onkeypress="OnUrlKeyPress" 
                   placeholder="Search privately with Google or enter URL..." 
                   class="address-bar" 
                   @onfocus="OnAddressFocus" 
                   @onblur="OnAddressBlur" />
            <button class="search-btn" @onclick="Navigate" title="Search">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"/>
                    <path d="M21 21l-4.35-4.35"/>
                </svg>
            </button>
        </div>
        
        <div class="browser-controls">
            <button class="control-btn" @onclick="TogglePrivacyMode" title="Privacy Settings">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
                </svg>
            </button>
            <button class="control-btn" @onclick="ShowSettings" title="Settings">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="3"/>
                    <path d="M12 1v6m0 6v6m11-7h-6m-6 0H1"/>
                </svg>
            </button>
        </div>
    </div>
    
    <div class="browser-content">
        @if (CurrentPage != null)
        {
            <div class="page-container">
                <div class="page-info">
                    <div class="page-title">@CurrentPage.Title</div>
                    <div class="page-url">@CurrentPage.Url</div>
                </div>
                <div class="page-body">
                    @((MarkupString)CurrentPage.Content)
                </div>
            </div>
        }
        else
        {
            <div class="welcome-screen">
                <div class="welcome-content">
                    <div class="browser-logo">
                        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                            <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
                        </svg>
                    </div>
                    <h1 class="welcome-title">SW3DO Browser</h1>
                    <p class="welcome-subtitle">Private, Fast, Secure</p>
                    <div class="privacy-features">
                        <div class="feature">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
                            </svg>
                            <span>No tracking</span>
                        </div>
                        <div class="feature">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                                <circle cx="12" cy="12" r="3"/>
                            </svg>
                            <span>Private browsing</span>
                        </div>
                        <div class="feature">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"/>
                            </svg>
                            <span>Lightning fast</span>
                        </div>
                    </div>
                </div>
            </div>
        }
        
        <div class="status-bar">
            <div class="status-left">
                <span class="status-indicator @(IsPrivateMode ? "private" : "normal")"></span>
                <span class="status-text">@StatusMessage</span>
            </div>
            <div class="status-right">
                <span class="connection-status">ðŸ”’ Secure</span>
            </div>
        </div>
    </div>
</div>

<style>
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }
    
    .sw3do-browser {
        height: 100vh;
        display: flex;
        flex-direction: column;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'SF Pro Display', Roboto, sans-serif;
        background: #0a0a0a;
        color: #ffffff;
        overflow: hidden;
    }
    
    .browser-header {
        display: flex;
        align-items: center;
        padding: 8px 16px;
        background: rgba(20, 20, 20, 0.95);
        backdrop-filter: blur(20px);
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        gap: 16px;
        min-height: 56px;
    }
    
    .nav-controls {
        display: flex;
        gap: 4px;
    }
    
    .nav-btn {
        width: 32px;
        height: 32px;
        border: none;
        background: rgba(255, 255, 255, 0.08);
        border-radius: 8px;
        cursor: pointer;
        color: #ffffff;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
    }
    
    .nav-btn:hover:not(:disabled) {
        background: rgba(255, 255, 255, 0.12);
        transform: scale(1.05);
    }
    
    .nav-btn:active:not(:disabled) {
        transform: scale(0.95);
    }
    
    .nav-btn:disabled {
        opacity: 0.3;
        cursor: not-allowed;
    }
    
    .address-container {
        flex: 1;
        display: flex;
        align-items: center;
        background: rgba(255, 255, 255, 0.06);
        border-radius: 12px;
        padding: 0 12px;
        gap: 8px;
        transition: all 0.2s ease;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .address-container:focus-within {
        background: rgba(255, 255, 255, 0.1);
        border-color: rgba(255, 255, 255, 0.2);
        box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.1);
    }
    
    .privacy-indicator {
        color: #00d4aa;
        display: flex;
        align-items: center;
    }
    
    .address-bar {
        flex: 1;
        padding: 12px 0;
        border: none;
        background: transparent;
        color: #ffffff;
        font-size: 14px;
        outline: none;
        font-family: inherit;
    }
    
    .address-bar::placeholder {
        color: rgba(255, 255, 255, 0.5);
    }
    
    .search-btn {
        width: 32px;
        height: 32px;
        border: none;
        background: rgba(255, 255, 255, 0.08);
        border-radius: 6px;
        cursor: pointer;
        color: #ffffff;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }
    
    .search-btn:hover {
        background: rgba(255, 255, 255, 0.12);
    }
    
    .browser-controls {
        display: flex;
        gap: 4px;
    }
    
    .control-btn {
        width: 32px;
        height: 32px;
        border: none;
        background: rgba(255, 255, 255, 0.08);
        border-radius: 8px;
        cursor: pointer;
        color: #ffffff;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }
    
    .control-btn:hover {
        background: rgba(255, 255, 255, 0.12);
        transform: scale(1.05);
    }
    
    .browser-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        background: #0a0a0a;
    }
    
    .page-container {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
    }
    
    .page-info {
        margin-bottom: 20px;
        padding: 16px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .page-title {
        font-size: 18px;
        font-weight: 600;
        color: #ffffff;
        margin-bottom: 8px;
    }
    
    .page-url {
        font-size: 13px;
        color: rgba(255, 255, 255, 0.6);
        font-family: 'SF Mono', Monaco, monospace;
    }
    
    .page-body {
        background: rgba(255, 255, 255, 0.03);
        border-radius: 12px;
        padding: 20px;
        line-height: 1.6;
        border: 1px solid rgba(255, 255, 255, 0.08);
    }
    
    .welcome-screen {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 40px;
    }
    
    .welcome-content {
        text-align: center;
        max-width: 400px;
    }
    
    .browser-logo {
        margin-bottom: 24px;
        color: #00d4aa;
    }
    
    .welcome-title {
        font-size: 32px;
        font-weight: 700;
        margin-bottom: 8px;
        background: linear-gradient(135deg, #ffffff 0%, #00d4aa 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .welcome-subtitle {
        font-size: 16px;
        color: rgba(255, 255, 255, 0.6);
        margin-bottom: 32px;
    }
    
    .privacy-features {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }
    
    .feature {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 16px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .feature svg {
        color: #00d4aa;
    }
    
    .feature span {
        color: rgba(255, 255, 255, 0.8);
        font-size: 14px;
    }
    
    .status-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 16px;
        background: rgba(20, 20, 20, 0.95);
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(20px);
        min-height: 32px;
    }
    
    .status-left {
        display: flex;
        align-items: center;
        gap: 8px;
    }
    
    .status-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #00d4aa;
    }
    
    .status-indicator.private {
        background: #ff6b6b;
    }
    
    .status-text {
        font-size: 12px;
        color: rgba(255, 255, 255, 0.6);
    }
    
    .status-right {
        font-size: 12px;
        color: rgba(255, 255, 255, 0.6);
    }
    
    .connection-status {
        color: #00d4aa;
    }
</style>

@code
{
    private string CurrentUrl { get; set; } = "sw3do://home";
    private string StatusMessage { get; set; } = "SW3DO Browser ready - Private mode active";
    private bool CanGoBack { get; set; } = false;
    private bool CanGoForward { get; set; } = false;
    private bool IsPrivateMode { get; set; } = true;
    private bool IsAddressFocused { get; set; } = false;
    private PageContent? CurrentPage { get; set; } = null;

    public class PageContent
    {
        public string Title { get; set; } = "";
        public string Content { get; set; } = "";
        public string Url { get; set; } = "";
        public List<SearchResult> Links { get; set; } = new();
    }

    public class SearchResult
    {
        public string Title { get; set; } = "";
        public string Url { get; set; } = "";
        public string Description { get; set; } = "";
        public double RelevanceScore { get; set; } = 0.0;
        public double DomainAuthority { get; set; } = 1.0;
        public double ContentQuality { get; set; } = 1.0;
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateNavigationState();
        CurrentUrl = await JsRuntime.InvokeAsync<string>("__TAURI__.core.invoke", "get_current_url");
        await LoadCurrentPage();
        StatusMessage = "SW3DO Browser ready - Private mode active";
    }
    
    private void OnAddressFocus()
    {
        IsAddressFocused = true;
        StateHasChanged();
    }
    
    private void OnAddressBlur()
    {
        IsAddressFocused = false;
        StateHasChanged();
    }
    
    private void TogglePrivacyMode()
    {
        IsPrivateMode = !IsPrivateMode;
        StatusMessage = IsPrivateMode ? "Private mode enabled - No data stored" : "Normal browsing mode";
        StateHasChanged();
    }
    
    private void ShowSettings()
    {
        StatusMessage = "Settings panel - Coming soon";
        StateHasChanged();
    }

    private async Task Navigate()
    {
        var url = CurrentUrl.Trim();
        
        if (string.IsNullOrEmpty(url))
            return;
            
        try
        {
            StatusMessage = "Navigating...";
            StateHasChanged();
            
            CurrentPage = await JsRuntime.InvokeAsync<PageContent>("__TAURI__.core.invoke", "navigate_to", new { url = url });
            await UpdateNavigationState();
            CurrentUrl = await JsRuntime.InvokeAsync<string>("__TAURI__.core.invoke", "get_current_url");
            
            StatusMessage = $"Loaded: {CurrentPage?.Title ?? url}";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private void OnUrlKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _ = Navigate();
        }
    }

    private async Task GoBack()
    {
        try
        {
            StatusMessage = "Going back...";
            StateHasChanged();
            
            CurrentPage = await JsRuntime.InvokeAsync<PageContent>("__TAURI__.core.invoke", "go_back");
            if (CurrentPage != null)
            {
                CurrentUrl = CurrentPage.Url;
                await UpdateNavigationState();
                StatusMessage = $"Back to: {CurrentPage.Title}";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Cannot go back: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private async Task GoForward()
    {
        try
        {
            StatusMessage = "Going forward...";
            StateHasChanged();
            
            CurrentPage = await JsRuntime.InvokeAsync<PageContent>("__TAURI__.core.invoke", "go_forward");
            if (CurrentPage != null)
            {
                CurrentUrl = CurrentPage.Url;
                await UpdateNavigationState();
                StatusMessage = $"Forward to: {CurrentPage.Title}";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Cannot go forward: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private async Task Refresh()
    {
        try
        {
            StatusMessage = "Refreshing...";
            StateHasChanged();
            
            CurrentPage = await JsRuntime.InvokeAsync<PageContent>("__TAURI__.core.invoke", "navigate_to", new { url = CurrentUrl });
            
            StatusMessage = "Page refreshed";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Refresh error: {ex.Message}";
        }
        
        StateHasChanged();
    }

    private async Task LoadCurrentPage()
    {
        try
        {
            CurrentPage = await JsRuntime.InvokeAsync<PageContent?>("__TAURI__.core.invoke", "get_current_page");
        }
        catch (Exception ex)
        {
            StatusMessage = $"Load error: {ex.Message}";
        }
    }

    private async Task UpdateNavigationState()
    {
        try
        {
            CanGoBack = await JsRuntime.InvokeAsync<bool>("__TAURI__.core.invoke", "can_go_back");
            CanGoForward = await JsRuntime.InvokeAsync<bool>("__TAURI__.core.invoke", "can_go_forward");
        }
        catch (Exception ex)
        {
            StatusMessage = $"Navigation state error: {ex.Message}";
        }
    }
}
